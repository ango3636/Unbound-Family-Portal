@page "/drafts"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using FamilyPortal.ServiceInterface
@using Telerik.Blazor

@inject LetterService LetterService
@inject NavigationManager Navigation

<PageTitle>Draft Letters</PageTitle>

<!-- Drafts List -->
<TelerikContainer>
    <Heading1>Your Draft Letters</Heading1>

    @if (drafts != null && drafts.Any())
    {

        <TelerikListView Data="@drafts">
            <Template>
                <div class="draft-item listview-item">

                    <div class="text-lg mb-2 font-bold text-gray-800">To: @context.ChildName</div>

                    <span class="text-gray-700">@context.ELetterText.Substring(0, Math.Min(context.ELetterText.Length,
                    50))...</span>

                    <div class="flex space-x-2 button-container mt-2">
                        <PrimaryButton @onclick="() => EditDraft(context)" class="btn btn-primary">Edit Draft
                        </PrimaryButton>

                        <PrimaryButton @onclick="ShowDeleteWindow" class="btn btn-danger">Delete Draft
                        </PrimaryButton>
                    </div>
                </div>

                <TelerikWindow @bind-Visible="@WindowIsVisible">
                    <WindowTitle>
                        Delete Draft?
                    </WindowTitle>
                    <WindowContent>
                        Are you sure you want to delete this draft?
                    </WindowContent>
                    <WindowActions>
                        <WindowAction Name="Close" />
                    </WindowActions>
                    <WindowFooter>
                        <PrimaryButton @onclick="() => DeleteDraft(context)">CONFIRM</PrimaryButton>
                    </WindowFooter>
                </TelerikWindow>
            </Template>
        </TelerikListView>
    }
    else
    {
        <p>No drafts available.</p>
    }



</TelerikContainer>

@code {
    private List<ELetter> drafts = new();
    private ELetter selectedDraft;
    bool WindowIsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        // Fetch drafts for the associate (user) from the database
        drafts = await LetterService.GetDraftsByAssociateIdAsync(associateId);
        foreach (var draft in drafts)
        {
            draft.ChildName = await LetterService.GetChildNameByIdAsync(draft.ChildID);
        }
    }

    private async Task EditDraft(ELetter draft)
    {
        Navigation.NavigateTo($"/writealetter/{draft.ELetterID}");
    }

    private async Task DeleteDraft(ELetter draft)
    {

        await LetterService.DeleteDraftAsync(draft.ELetterID);
        drafts.Remove(draft);

        WindowIsVisible = false;
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);

    }

    private async Task ShowDeleteWindow()
    {
        WindowIsVisible = true;
    }

    // Example Associate ID, replace with actual logged-in user ID
    private int associateId = 1;
}

<style>
    .listview-item {
        height: 150px;
        width: 400px;
        display: inline-block;
        margin: 10px;
        border: 1px solid black;
        border-radius: 10px;
        padding: 20px;
    }


    .button-container {
        margin-top: 15px;
    }
</style>