@page "/UploadPhoto/{ELetterID:int?}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))


@using FamilyPortal.ServiceInterface
@inject SponsorService SponsorService
@inject NavigationManager Navigation


@using System.Text.RegularExpressions
@using Telerik.Blazor
@using Microsoft.AspNetCore.Mvc.Rendering


<TelerikContainer>
    <Heading1>Upload Photo</Heading1>


    <div class="k-form-field" style="padding-bottom: 10px;">
        <label class="k-form-label">Select A Sponsor:</label>
        <TelerikDropDownList Data="@SponsorLetters" @bind-Value="@SelectedSponsorLetter" Width="300px" />
    </div>


    <div class="k-form-field" style="padding: 10px;">
        <label class="k-form-label">Select Photo:</label>
        <InputFile OnChange="HandlePhotoUpload" multiple="false" accept="image/jpeg,image/jpg" />
        <span class="text-danger">@ErrorMessage</span>
        <br />
        <div class="flex space-x-2 button-container mt-2">
            <PrimaryButton @onclick="SendPhoto">Submit Photo</PrimaryButton>
        </div>
    </div>


    @if (!string.IsNullOrEmpty(UploadedPhoto))
    {
        <div class="k-form-field">
            <label class="k-form-label">Uploaded Photo:</label>
            <div style="border: 1px solid #ccc; width: 480px; height: 640px; overflow: hidden; position: relative;">
                <img id="preview" src="@UploadedPhoto" style="max-width: 100%; max-height: 100%; position: absolute;" />
            </div>
        </div>
    }
    </TelerikContainer>


    @code {
    [Parameter] public int? ELetterID { get; set; }
    List<SelectListItem> SponsorLetters = new();
    string SelectedSponsorLetter { get; set; }
    string UploadedPhoto { get; set; }
    string ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // Initialize sponsor letters for dropdown
        SponsorLetters = await SponsorService.GetAssociatesBySponsorIdAsync(2); // Replace with dynamic associate ID if needed
        if (SponsorLetters.Any())
        {
            SelectedSponsorLetter = SponsorLetters.First().Value;
        }
    }


    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        ErrorMessage = string.Empty;


        if (file == null)
            return;


        // Debugging message to confirm file is detected
        Console.WriteLine($"File uploaded: {file.Name}, Size: {file.Size}, Type: {file.ContentType}");


        // Check file type (only .jpg, .jpeg)
        if (file.ContentType != "image/jpeg" && file.ContentType != "image/jpg")
        {
            ErrorMessage = "Please upload a .jpg or .jpeg image.";
            return;
        }


        // Check file size (limit to 5MB)
        if (file.Size > 5 * 1024 * 1024) // 5MB limit
        {
            ErrorMessage = "File size is too large. Maximum size is 5MB.";
            return;
        }


        // Read the uploaded file and display it
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        UploadedPhoto = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";


        // Debugging message to confirm the photo data
        Console.WriteLine($"Uploaded photo data: {UploadedPhoto.Substring(0, 30)}...");


        // Trigger re-render
        StateHasChanged();
    }


    private async Task SendPhoto()
    {
        if (string.IsNullOrEmpty(UploadedPhoto))
        {
            ErrorMessage = "Please upload a photo first.";
            return;
        }


        // Debugging message before submitting
        Console.WriteLine("Submitting photo...");


        // Process the uploaded photo (send to server, etc.)
        // For now, we'll just redirect to a success page.
        Navigation.NavigateTo("/photosent");
    }
}
<style>
    .button-container {
        margin-top: 15px;
    }
</style>