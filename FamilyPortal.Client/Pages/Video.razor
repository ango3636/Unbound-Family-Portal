@page "/video"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IJSRuntime JS
@using FamilyPortal.ServiceInterface
@inject SponsorService SponsorService
@inject VideoService VideoService
@inject LetterService LetterService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.Text.RegularExpressions
@using Telerik.Blazor
@using Microsoft.AspNetCore.Mvc.Rendering;

<TelerikContainer>

    @if (isEditingDraft)
    {
        <Heading1>Edit Draft</Heading1>
    }
    else
    {
        <Heading1>Record New Video</Heading1>
    }

    <div class="k-form-field" style="padding-bottom: 10px;">
        <label class="k-form-label">Select A Sponsor:</label>
        <TelerikDropDownList Data="@SponsorLetters" @bind-Value="@SelectedSponsorLetter" Width="300px" />
    </div>

    <p class="k-text-secondary">Last saved/submitted on: <strong>@LastSavedDate</strong></p>

    @*VIDEO PREVIEW / BOX*@
    @if (VideoValue.IsNullOrEmpty())
    {
        <div class="k-form-field">
            <label class="k-form-label">Uploaded Video:</label>
            <div class "k-file-item" style="margin: 10px;">
                <video id="videoPreview" autoplay Width="70%" Height="400px" border: 1px solid #ccc;"></video>
            </div>
        </div>
    }

    else
    {
        <div class="k-form-field">
            <label class="k-form-label">Live Preview:</label>
            <video src="@VideoValue" id="videoPreview" autoplay Width="70%" Height="400px" border: 1px solid
                #ccc;">@videoFileName</video>
        </div>
    }

    @*WHEN RECORDING VIDEO*@


    <div class="k-form-field" style="padding: 10px;">
        <label class="k-form-label">Select Video:</label>
        <InputFile OnChange="HandleVideoUpload" Accept=".mp4,.webm,.ogg,.mkv" />

        <PrimaryButton @onclick="ShowSaveDraftWindow">Save Draft</PrimaryButton>
        <PrimaryButton @onclick="SendVideo">Send Video</PrimaryButton>


    </div>

    <TelerikWindow @bind-Visible="@WindowIsVisible">
        <WindowTitle>
            Draft Saved
        </WindowTitle>
        <WindowContent>
            Your draft has been successfully saved.
        </WindowContent>
        <WindowActions>
            <WindowAction Name="Close" />
        </WindowActions>
        <WindowFooter>
            <PrimaryButton @onclick="CloseWindow">OK</PrimaryButton>
        </WindowFooter>
    </TelerikWindow>

    <TelerikWindow @bind-Visible="@SendWindowIsVisible">
        <WindowTitle>
            Video Sent
        </WindowTitle>
        <WindowContent>
            Your video has been sent to the recipient
        </WindowContent>
        <WindowActions>
            <WindowAction Name="Close" />
        </WindowActions>
        <WindowFooter>
            <PrimaryButton @onclick="CloseWindow">OK</PrimaryButton>
        </WindowFooter>
    </TelerikWindow>


</TelerikContainer>

<script src="~/js/recordVideo.js"></script>


@code {
    [Parameter] public int? VideoID { get; set; }
    string VideoValue { get; set; } = string.Empty;
    string videoFileName { get; set; } = string.Empty;
    private string videoDraft;
    private string VideoBlobId { get; set; } = string.Empty;
    string LastSavedDate { get; set; } = DateTime.Now.ToString("MM/dd/yyyy");
    string errorMessage;
    private IJSObjectReference module;



    List<SelectListItem> SponsorLetters = new();
    string SelectedSponsorLetter { get; set; }


    bool IsAutosaving { get; set; }
    private bool isEditingDraft = false;
    bool WindowIsVisible = false;
    bool SendWindowIsVisible = false;
    int associateId = 1;// Example AssociateID, replace with actual dynamic data (like logged-in user's ID)
    int childId = 1; // For demonstration; replace with actual logic to get the child ID

    protected override async Task OnInitializedAsync()
    {
        // Load sponsor letters associated with the user
        SponsorLetters = await SponsorService.GetChildrenBySponsorIdAsync(associateId);

        if (SponsorLetters.Any())
        {
            SelectedSponsorLetter = SponsorLetters.First().Value; // Set the first sponsor letter by default
            childId = int.Parse(SelectedSponsorLetter); // Convert it to an integer for use
        }

        if (VideoID.HasValue)
        {
            // Fetch the video draft using the provided VideoID
            var draft = await VideoService.GetDraftByIdAsync(VideoID.Value);

            if (draft != null)
            {
                isEditingDraft = true; // We're editing an existing draft
                LastSavedDate = draft.CreatedOn.ToString("MM/dd/yyyy");
            }
            else
            {
                isEditingDraft = false; // If no draft exists, mark it as a new draft
            }
        }
        else
        {
            isEditingDraft = false; // Mark it as a new draft if no VideoID is provided
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadDraft(int videoId)
    {
        // Fetch the draft using the eLetterId
        var draft = await VideoService.GetDraftByIdAsync(videoId);
        if (draft != null)
        {
            isEditingDraft = true;
            VideoValue = draft.FileName; // Preload the draft content into the editor
        }
        else
        {
            isEditingDraft = false;
        }
    }

    private async Task HandleVideoUpload(InputFileChangeEventArgs e)
    {
        Console.WriteLine("START OF HANDLE VIDEO UPLOAD");
        var SelectedFile = e.File;



        /* if (SelectedFile.Size > 5 * 1024 * 1024) // 5MB max
        {
        Console.WriteLine("INSIDE THE IF STATEMENT");
        errorMessage = "File size is too large. Maximum allowed size is 5MB.";
        return;
        } */

        using var stream = SelectedFile.OpenReadStream();
        var buffer = new byte[SelectedFile.Size];
        await stream.ReadAsync(buffer);

        VideoValue = $"data:{SelectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        Console.WriteLine("THIS IS THE VIDEO VALUE: ", VideoValue);
        videoFileName = SelectedFile.Name;
        VideoBlobId = "12345";
        Console.WriteLine(videoFileName);
        errorMessage = " ";
    }



    private async Task SaveDraft()
    {
        //var plainText = ConvertHtmlToPlainText(VideoValue);

        var draftVideo = new DigitalChildLetter
            {
                FileName = videoFileName,
                AssociateID = 1,
                ChildID = 1,
                CreatedOn = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),
                BlobID = VideoBlobId,
                IsDraft = 1,
                ChildName = SelectedSponsorLetter
            };

        /*if (isEditingDraft)
        {
        draftVideo.VideoID = VideoID.Value;
        await VideoService.UpdateVideoDraftAsync(draftVideo);
        }
        else
        {
        await VideoService.SaveVideoDraftAsync(draftVideo);
        }*/

        try
        {
            if (isEditingDraft)
            {
                draftVideo.VideoID = VideoID.Value;
                await VideoService.UpdateVideoDraftAsync(draftVideo);
                Console.WriteLine("Draft updated successfully.");
            }
            else
            {
                await VideoService.SaveVideoDraftAsync(draftVideo);
                Console.WriteLine("Draft saved successfully.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving draft: {ex.Message}");
        }

    }

    private async Task SendVideo()
    {

        var video = new DigitalChildLetter
            {
                FileName = videoFileName,
                IsDraft = 0,
                CreatedOn = DateTimeOffset.UtcNow.ToUnixTimeSeconds()
            };
        //await VideoService.SendVideoAsync(video);

        //Navigation.NavigateTo("/videosent"); // Redirect after sending *@
    }

    public static string ConvertHtmlToPlainText(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        // Convert <p> tags to new lines
        input = Regex.Replace(input, "<p.*?>", "\n");
        input = Regex.Replace(input, "</p>", "\n");

        // Remove other HTML tags
        input = Regex.Replace(input, "<.*?>", string.Empty);

        return input;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("startRecording");
            await JS.InvokeVoidAsync("stopRecording");

        }
    }


    private async Task ShowSaveDraftWindow()
    {
        WindowIsVisible = true;
        await SaveDraft();
    }

    private async Task ShowSendVideotWindow()
    {
        SendWindowIsVisible = true;
        await SaveDraft();
    }
    private void CloseWindow()
    {
        WindowIsVisible = false;
        SendWindowIsVisible = false;

    }
    private async Task StartRecording()
    {
        await JS.InvokeVoidAsync("startRecording");
    }

    private async Task StopRecording()
    {
        await JS.InvokeVoidAsync("stopRecording");
    }

}

<script>
    let mediaRecorder;
    let recordedBlobs;

    function handleDataAvailable(event) {
        if (event.data && event.data.size > 0) {
            recordedBlobs.push(event.data);
        }
    }

    async function startRecording() {
        const constraints = {
            video: true,
            audio: true
        };

        const stream = await navigator.mediaDevices.getUserMedia(constraints);
        const videoElement = document.getElementById('video');
        videoElement.srcObject = stream;

        recordedBlobs = [];
        mediaRecorder = new MediaRecorder(stream);
        mediaRecorder.ondataavailable = handleDataAvailable;
        mediaRecorder.start();
        console.log('Recording started');
    }

    function stopRecording() {
        mediaRecorder.stop();
        console.log('Recording stopped');
        const blob = new Blob(recordedBlobs, { type: 'video/webm' });
        const url = window.URL.createObjectURL(blob);
        const videoElement = document.getElementById('video');
        videoElement.srcObject = null;
        videoElement.src = url;
        downloadRecordedVideo(blob);
    }

    function downloadRecordedVideo(blob) {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = 'recorded-video.webm';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    }
</script>