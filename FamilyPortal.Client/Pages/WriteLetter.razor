@page "/writealetter"
@rendermode InteractiveAuto

@using Telerik.Blazor

<PageTitle>Write A Letter</PageTitle>

<Heading1>Write A Letter</Heading1>

<!-- Dropdown for selecting sponsor letter(s) to reply to -->
<div class="k-form-field" style="padding-bottom: 10px;">
    <label class="k-form-label">Select Sponsor Letter(s):</label>
    <TelerikDropDownList Data="@SponsorLetters" @bind-Value="@SelectedSponsorLetter" Width="300px" />
</div>

<p class="k-text-secondary">Last saved/submitted on: <strong>@LastSavedDate</strong></p>

<!-- Rich text editor for writing the letter -->
<div class="k-form-field" style="padding-top: 10px;">
    <TelerikEditor @bind-Value="@TheEditorValue" Width="70%" Height="400px"></TelerikEditor>
</div>

<!-- Photo upload section (1-4 photos) -->
<div class="k-form-field" style="padding: 10px;">
    <label class="k-form-label">Attach Photos (1-4):</label>
    <InputFile OnChange="HandlePhotoUpload" multiple="true" />

    <!-- Save and Send Buttons with Confirmations -->
    <PrimaryButton @onclick="SaveLetter">Save for Later</PrimaryButton>
    <PrimaryButton @onclick="SendLetter">Send Letter</PrimaryButton>
</div>

@if (UploadedPhotos.Any())
{
    <div class="k-form-field">
    <label class="k-form-label">Uploaded Photos:</label>
    <div class="k-file-list">
        @foreach (var photo in UploadedPhotos)
            {
                <div class="k-file-item" style="display: inline-block; margin: 5px;">
                    <img src="@photo" alt="Uploaded photo" style="width: 100px; height: 100px;" class="k-image" />
                    <button @onclick="@(() => RotatePhoto(photo))" class="k-button k-button-icon k-primary"
                        style="margin-top: 5px;">
                        <span class="k-icon k-i-rotate"></span> Rotate
                    </button>
                </div>
            }
        </div>
    </div>
}


@code {
    // Editor content
    string TheEditorValue { get; set; } = "Write A Message";
    // List of sponsor letters (for selection)
    List<string> SponsorLetters = new() { "Letter 1", "Letter 2", "Letter 3" };
    string SelectedSponsorLetter { get; set; }

    // Last saved/submit date
    string LastSavedDate { get; set; } = DateTime.Now.ToString("MM/dd/yyyy");

    // Photo management
    List<string> UploadedPhotos = new();
    bool IsAutosaving { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TheEditorValue = "";
        await base.OnInitializedAsync();
    }

    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        // Allow up to 4 photos
        if (UploadedPhotos.Count + e.FileCount > 4)
        {
            // Handle the error here (e.g., show an alert or error message)
            return;
        }

        // Process each uploaded photo
        foreach (var file in e.GetMultipleFiles(4 - UploadedPhotos.Count))
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            UploadedPhotos.Add(Convert.ToBase64String(buffer)); // Save photo as Base64 for simplicity
        }
    }

    private void RotatePhoto(string photo)
    {
        // Rotation logic for photo, if required
    }

    private async Task SaveLetter()
    {
        // Save the letter content and photos, and update the last saved date
        LastSavedDate = DateTime.Now.ToString("MM/dd/yyyy");
        // Trigger an autosave if enabled
        if (IsAutosaving)
        {
            await AutoSaveAsync();
        }
    }

    private async Task AutoSaveAsync()
    {
        // Implementation of autosaving logic
    }

    private async Task SendLetter()
    {
        // Show confirmation before sending
        bool confirmSend = await ShowConfirmationAsync("Are you sure you want to send this letter?");
        if (confirmSend)
        {
            // Send the letter (save/send logic here)
        }
    }

    private Task<bool> ShowConfirmationAsync(string message)
    {
        // Show confirmation message and return user's choice (e.g., using a modal or dialog)
        return Task.FromResult(true); // Replace with actual confirmation logic
    }
}
