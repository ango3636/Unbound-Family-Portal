@page "/Account/ForgotPassword"
@layout Layout.LoginLayout

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FamilyPortal.Data
@using FamilyPortal.ServiceInterface

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject ChildService ChildService
@inject AssociateService AssociateService

<PageTitle>Forgot your Password?</PageTitle>

<div class="mt-8 mx-auto max-w-lg">
    <Heading1>Forgot your Password?</Heading1>
    <Heading3>Enter your username to recover your password.</Heading3>

    <StatusMessage Message="@Message" />
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" FormName="forgot-password" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="mb-3 text-danger text-center font-semibold" />
        <div class="flex flex-col gap-y-4">
            <div>
                <label for="username" class="@TextInput.LabelClasses">Username</label>
                <div class="mt-1 relative rounded-md shadow-sm">
                    <InputText id="username" type="text" @bind-Value="Input.Username" class="@TextInput.InputClasses" autocomplete="username" aria-required="true" placeholder="User123" />
                </div>
                <ValidationMessage For="() => Input.Username" class="mt-2 text-danger text-sm" />
            </div>

        @if (showQuestion)
        {
            <div>
                <p>
                    <br>
                    Please answer your security question below:
                </p>
                <p>
                    @securityQuestion
                </p>
            </div>
            <div>
                <label for="answer" class="@TextInput.LabelClasses">Security Question Answer</label>
                <div class="mt-1 relative rounded-md shadow-sm">
                    <InputText id="answer" type="text" @bind-Value="Input.Answer" class="@TextInput.InputClasses" autocomplete="answer" placeholder="Answer" />
                </div>
                <ValidationMessage For="() => Input.Answer" class="mt-2 text-danger text-sm" />
            </div>

            @if (showPassword)
            {
                <div>
                    <p>
                        Your password is:
                    </p>
                    <p>
                        @password
                    </p>
                </div>
            }
            else
            {
                <div>
                    <PrimaryButton type="submit" @onclick="ValidateAnswer">Recover Password</PrimaryButton>
                </div>
            }
        }
        else
        {
            <div>
                <PrimaryButton type="submit" @onclick="ValidateUser">Submit</PrimaryButton>
            </div>
        }

            <div class="mt-8 text-sm">
                <p class="mb-3">
                    <HyperLink class="font-semibold" id="login" href="">Login</HyperLink>
                </p>
                <p class="mb-3">
                    <HyperLink class="font-semibold" id="forgot-username" href="/ForgotUsernameRoute">Forgot your username?</HyperLink>
                </p>
            </div>
    
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private Child existingChild = new Child();
    private Associate existingAssociate = new Associate();
    private string? securityQuestion;
    private string? password;

    private string? ReturnUrl { get; set; }

    private bool showQuestion = false;
    private bool showPassword = false;
    private List<IdentityError>? identityErrors;

    private string? Message => identityErrors is null ? null : string.Join(", ", identityErrors.Select(e => e.Description));

    private void ClearErrors()
    {
        identityErrors = null;
    }
    private void ShowSecurityQuestion()
    {
        showQuestion = true; // Show the input when the button is clicked
    }

    public async Task ValidateUser()
    {
        ClearErrors(); // Clear previous errors

        // Validate input fields
        if (string.IsNullOrWhiteSpace(Input.Username))
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError
                {
                    Description = "Please enter Username. [ESPAÑOL]Por favor ingrese el nombre de usuario."
                }
            };
            return;
        }

        // Attempt to authenticate as a child user
        existingChild = await ChildService.GetChildByUsernameAsync(Input.Username);

        // Attempt to authenticate as an associate user
        existingAssociate = await AssociateService.GetAssociateByUsernameAsync(Input.Username);

        if (existingChild != null) // child user is found
        {
            securityQuestion = existingChild.SecurityQuestion;
        }
        else if (existingAssociate != null) // associate user is found
        {
            securityQuestion = existingAssociate.SecurityQuestion;
        }
        else // no user is found
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError
                {
                    Description = "We cannot find you according to the information entered. Please try again or contact someone from your local office for more help. [ESPAÑOL]No podemos encontrarlo según la información ingresada. Inténtelo de nuevo o comuníquese con alguien de su oficina local para obtener más ayuda."
                }
            };
            return;
        }

        showQuestion = true; // Show the security question when the button is clicked and user is found
    }

    public async Task ValidateAnswer()
    {
        ClearErrors(); // Clear previous errors

        // Validate input fields
        if (string.IsNullOrWhiteSpace(Input.Answer))
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError
                {
                    Description = "Please enter security question answer. [ESPAÑOL]Por favor ingrese la respuesta a la pregunta de seguridad."
                }
            };
            return;
        }

        if (existingChild != null)
        {
            if (Input.Answer == existingChild.SecurityAnswer)
            {
                showPassword = true;
                password = existingChild.PasswordHash;
                return;
            }
        }
        else if (existingAssociate != null)
        {
            if (Input.Answer == existingAssociate.SecurityAnswer)
            {
                showPassword = true;
                password = existingAssociate.PasswordHash;
                return;
            }
        }
        
        // no user is found
        identityErrors = new List<IdentityError>
        {
            new IdentityError
            {
                Description = "The answer to the security question is incorrect. Please try again or contact someone from your local Unbound office for help. [ESPAÑOL]The respuesta a la pregunta de seguridad es incorrecta. Por favor intente nuevamente o contacte a alguien de su oficina local de Unbound para ayuda."
            }
        };
        return;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]

        public string Username { get; set; } = "";

        [Display(Name = "Answer")]

        public string Answer { get; set; } = "";
    }
}
