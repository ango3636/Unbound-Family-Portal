@page "/Account/ForgotPassword"
@layout Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FamilyPortal.Data
@inject NavigationManager NavigationManager

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your credentials?</PageTitle>

<div class="mt-8 mx-auto max-w-lg">
    <Heading1>Forgot your credentials?</Heading1>
    <Heading3>Select which login requirement you have forgotten.</Heading3>

    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="mb-3 text-danger text-center font-semibold" />
        <div class="flex flex-col gap-y-4">
            <div class="form-group row">
                <div id="RadioButtons" class="col-sm-10">
                    <InputRadioGroup id="RadioButtons" @bind-Value=@Input.SelectedOption>
                        @foreach (var item in Input.RadioItems)
                        {
                            <div class="col-sm-10">
                                <InputRadio class="form-check-input" id=@item.Index Value=@item.Index />
                                <label class="form-check-label" for=@item.Index>@item.Title</label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </div>

            @* @if (Input.SelectedOption == 1)
            {
                <div class="mt-3">
                    <label for="additionalInfo">Please provide additional information:</label>
                    <InputText id="additionalInfo" @bind-Value="Input.AdditionalInfo" class="@TextInput.InputClasses" placeholder="ID" />
                    <ValidationMessage For="@(() => Input.AdditionalInfo)" class="text-danger" />
                </div>
            } *@

            <div>
                <label for="email" class="@TextInput.LabelClasses">Email</label>
                <div class="mt-1 relative rounded-md shadow-sm">
                    <InputText id="email" type="text" @bind-Value="Input.Email" class="@TextInput.InputClasses" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                </div>
                <ValidationMessage For="() => Input.Email" class="mt-2 text-danger text-sm" />
            </div>
            <div>
                <PrimaryButton type="submit">Reset password</PrimaryButton>
            </div>
        </div>
    </EditForm>
</div>

@* @if (!string.IsNullOrEmpty(Input.SelectedOption)) *@
@* { *@
    @* <h4>You selected: @Input.SelectedOption</h4> *@
@* } *@

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? ReturnUrl { get; set; }

    private async Task OnValidSubmitAsync()
    {
        Console.WriteLine($"Selected Option: {Input.SelectedOption}");

        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private async Task RefreshPage(ChangeEventArgs e)
    {
        @* NavigationManager.GetUriWithQueryParameters("/Account/ForgotPassword", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }); *@
        Input.SelectedOption = (int) e.Value;
        // Navigate to the same URL to refresh the page
        await Task.Delay(1);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        @* Input.SelectedOption = (int) e.Value;
        // Perform any additional logic here
        StateHasChanged(); // This triggers a re-render *@
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        public int SelectedOption = 0;

        public string AdditionalInfo { get; set; } = string.Empty;

        public class RadioItem
        {
            public int Index;
            public string Title;
            public RadioItem(int index, string title)
            {
                this.Index = index;
                this.Title = title;
            }
        }

        public List<RadioItem> RadioItems = new()
        {
                new RadioItem(1, "Username"),
                new RadioItem(2, "Password")
        };
    }
}
