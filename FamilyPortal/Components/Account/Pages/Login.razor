@page "/"
@layout Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using FamilyPortal.ServiceInterface
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FamilyPortal.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ChildService ChildService
@inject AssociateService AssociateService

<PageTitle>Log in</PageTitle>

<div class="mt-8 mx-auto max-w-lg">
    <div class="max-w-xl">
        <Heading1>Welcome!</Heading1>
        <StatusMessage Message="@Message" />
        <section class="mt-4 sm:shadow overflow-hidden sm:rounded-md">
            <EditForm id="account" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <div class="px-4 bg-white dark:bg-black sm:p-6">
                    <ValidationSummary class="mb-3 text-danger text-center font-semibold" />
                    <div class="flex flex-col gap-y-4">
                        <div>
                            <div>
                                <label for="UserName" class="@TextInput.LabelClasses">Username</label>
                                <div class="mt-1 relative rounded-md shadow-sm">
                                    <InputText id="username" type="text" @bind-Value="Input.UserName" class="@TextInput.InputClasses" autocomplete="username" aria-required="true" placeholder="Enter username" />
                                    <ValidationMessage For="() => Input.UserName" />
                                </div>
                            </div>
                        </div>
                        <div>
                            <div>
                                <label for="Password" class="@TextInput.LabelClasses">Password</label>
                                <div class="mt-1 relative rounded-md shadow-sm">
                                    <InputText id="password" type="password" @bind-Value="Input.Password" class="@TextInput.InputClasses" autocomplete="current-password" aria-required="true" placeholder="Enter password" />
                                    <ValidationMessage For="() => Input.Password" />
                                </div>
                            </div>
                        </div>

                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <InputCheckbox id="remember-me" @bind-Value="Input.RememberMe" class="@CheckboxInput.InputClasses" />
                                <label for="remember-me" class="ml-2 block text-sm text-gray-900 dark:text-gray-50 select-none">Remember Me</label>
                            </div>
                        </div>

                        <div>
                            <PrimaryButton id="login-submit" type="submit">Log in</PrimaryButton>
                        </div>

                        <div class="mt-8 text-sm">
                            <p class="mb-3">
                                <HyperLink class="font-semibold" id="forgot-password" href="/ForgotUsernameRoute">Forgot your username?</HyperLink>
                            </p>
                            <p class="mb-3">
                                <HyperLink class="font-semibold" id="forgot-password" href="Account/ForgotPassword">Forgot your password?</HyperLink>
                            </p>
                            <p class="mb-3">
                                <HyperLink class="font-semibold" href="@(NavigationManager.GetUriWithQueryParameters("/RegisterRoute", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</HyperLink>
                            </p>
                        </div>
                    </div>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private Child child = new Child();
    private Associate associate = new Associate();
    private string? errorMessage;
    private List<IdentityError>? identityErrors;

    private string? Message => identityErrors is null ? null : string.Join(", ", identityErrors.Select(e => e.Description));

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override Task OnInitializedAsync()
    {
        child = new Child(); // Reset child object to default state
        associate = new Associate(); // Reset associate object to default state
        return base.OnInitializedAsync();
    }

    private void ClearErrors()
    {
        identityErrors = null;
    }

    public async Task LoginUser()
    {
        ClearErrors(); // Clear previous errors

        // Validate input fields
        if (string.IsNullOrWhiteSpace(Input.UserName) || string.IsNullOrWhiteSpace(Input.Password))
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError
                {
                    Description = "Please enter both Username and Password.[ESPAÑOL] Por favor, ingrese nombre the usuario y contraseña."
                }
            };
            return;
        }

        // Attempt to authenticate as a child user
        var existingChild = await ChildService.GetChildByLoginInfoAsync(Input.UserName, Input.Password);
        if (existingChild != null)
        {
            Logger.LogInformation("Child user logged in.");
            await SignInChildUser(existingChild);  // Sign in the child user
            NavigationManager.NavigateTo("/Dashboard");  // Redirect to Dashboard
            return;
        }

        // Attempt to authenticate as an associate user
        var existingAssociate = await AssociateService.GetAssociateByLoginInfoAsync(Input.UserName, Input.Password);
        if (existingAssociate != null)
        {
            Logger.LogInformation("Associate user logged in.");
            await SignInAssociateUser(existingAssociate);  // Sign in the associate user
            NavigationManager.NavigateTo("/Dashboard");  // Redirect to Dashboard
            return;
        }

        // If no user is found
        identityErrors = new List<IdentityError>
        {
            new IdentityError
            {
                Description = "Invalid login attempt. Please check your credentials.[ESPAÑOL]Intento de inicio de sesión no válido. Por favor verifique sus credenciales."
            }
        };
        Logger.LogWarning("Invalid login attempt for username: {UserName}", Input.UserName);
    }

    private async Task SignInChildUser(Child child)
    {
        // Add logic to sign in the child user here (e.g., create a temporary application user)
        var user = new ApplicationUser { UserName = child.UserName };
        await SignInManager.SignInAsync(user, Input.RememberMe);
    }

    private async Task SignInAssociateUser(Associate associate)
    {
        // Add logic to sign in the associate user here (e.g., create a temporary application user)
        var user = new ApplicationUser { UserName = associate.UserName };
        await SignInManager.SignInAsync(user, Input.RememberMe);
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

    