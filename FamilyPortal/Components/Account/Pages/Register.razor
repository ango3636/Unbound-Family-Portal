@page "/Account/Register"
@layout Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using FamilyPortal.ServiceInterface
@using Microsoft.AspNetCore.Identity
@using FamilyPortal.Data

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject ChildService ChildService

<PageTitle>Register</PageTitle>

<div class="mt-8 mx-auto max-w-lg">
    <Heading1>Register</Heading1>

    <StatusMessage Message="@Message" />
    <div class="mt-3 shadow overflow-hidden sm:rounded-md">
        <div class="px-4 bg-white dark:bg-black sm:p-6">
            <!-- Step 1: Verify Child Information -->
            <EditForm id="initialRegisterForm" Model="@child" OnValidSubmit="ValidateUser" FormName="initialRegisterForm">
                <Heading3>Enter your details to verify your identity.</Heading3>
                <DataAnnotationsValidator />
                <ValidationSummary class="mb-3 text-danger text-center font-semibold" />
                <div class="flex flex-col gap-y-4">
                    <div>
                        <label for="firstName">First Name</label>
                        <InputText id="firstName" @bind-Value="child.FirstName" class="input-class" />
                        <ValidationMessage For="() => child.FirstName" />
                    </div>
                    <div>
                        <label for="lastName">Last Name</label>
                        <InputText id="lastName" @bind-Value="child.LastName" class="input-class" />
                        <ValidationMessage For="() => child.LastName" />
                    </div>
                    <div>
                        <label for="childId">Child ID</label>
                        <InputNumber id="childId" @bind-Value="child.ChildId" class="input-class" />
                        <ValidationMessage For="() => child.ChildId" />
                    </div>
                    <div>
                        <PrimaryButton type="submit">Verify</PrimaryButton>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Only show the next step if validation is successful -->
    @if (isAccountSetup)
    {
        <div class="mt-8">
            <Heading3>Account Setup</Heading3>
            <p>Your account has been successfully verified. You can proceed to account setup.</p>
        </div>
    }
    <!-- Show error messages if validation fails -->
    @if (identityErrors != null && identityErrors.Any())
    {
        <div class="text-danger">
            @foreach (var error in identityErrors)
            {
                <p>@error.Description</p>
            }
        </div>
    }
</div>

@code {
    private Child child = new Child();
    /*private Child child = new Child
    {
    FirstName = "Kathy",
    LastName = "Simpson",
    ChildId = 1
    };*/

    private bool isAccountSetup = false;
    private List<IdentityError>? identityErrors;

    private string? Message => identityErrors is null ? null : string.Join(", ", identityErrors.Select(e => e.Description));
    protected override Task OnInitializedAsync()
    {
    child = new Child(); // Reset child object to default state
    return base.OnInitializedAsync();
    }

    public async Task ValidateUser()
{
    Console.WriteLine($"Input FirstName: {child.FirstName ?? "null"}");
    Console.WriteLine($"Input LastName: {child.LastName ?? "null"}");
    Console.WriteLine($"Input ChildId: {child.ChildId}");

    // Ensure ChildId is valid (not zero)
    if (child.ChildId == 0)
    {
        identityErrors = new List<IdentityError>
        {
            new IdentityError
            {
                Description = "Please enter a valid Child ID."
            }
        };
        return;
    }

    // Check if the child exists by FirstName, LastName, and ChildId
    var existingChild = await ChildService.GetChildByNameAsync(child.FirstName, child.LastName, child.ChildId);

    // If no child is found, or the ChildId does not match, return an error message
    if (existingChild == null)
    {
        identityErrors = new List<IdentityError>
        {
            new IdentityError
            {
                Description = "We cannot find you according to the information entered. Please try again or contact someone from your local office for more help."
            }
        };
        return;
    }

    // If the ChildId does not match, return a different error
    if (existingChild.ChildId != child.ChildId)
    {
        identityErrors = new List<IdentityError>
        {
            new IdentityError
            {
                Description = "The provided Child ID does not match our records."
            }
        };
        return;
    }

    // If validation is successful, show the account setup section
    isAccountSetup = true;
}

}



