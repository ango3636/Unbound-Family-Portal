@page "/Account/Register/Child"
@layout Layout.LoginLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using System.ComponentModel.DataAnnotations
@using FamilyPortal.ServiceInterface
@using Microsoft.AspNetCore.Identity
@using FamilyPortal.Data
@using System.Text.RegularExpressions

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject ChildService ChildService

<PageTitle>Register</PageTitle>

<div class="mt-8 mx-auto max-w-lg">
    <!-- Back Button  -->
    <div class="flex justify-start mt-4"> 
        <PrimaryButton @onclick="NavigateBack" class="mr-auto">Back</PrimaryButton>
    </div>

    <Heading1 class="text-center mt-8">Register</Heading1>

    <StatusMessage Message="@Message" />
    @if (!isAccountSetup)
    {
        <div class="mt-3 shadow overflow-hidden sm:rounded-md">
            <div class="px-4 bg-white dark:bg-black sm:p-6">
            <!-- Step 1: Verify Child Information -->
            <EditForm id="initialRegisterForm" Model="@child" OnValidSubmit="ValidateUser" FormName="initialRegisterForm">
                <Heading3>Enter your details to verify your identity.</Heading3>
                <DataAnnotationsValidator />
                <ValidationSummary class="mb-3 text-danger text-center font-semibold" />
                <div class="flex flex-col gap-y-4">
                    <div>
                        <label for="firstName">First Name</label>
                        <InputText id="firstName" @bind-Value="child.FirstName" class="input-class" placeholder ="Enter First Name"/>
                        <ValidationMessage For="() => child.FirstName" />
                    </div>
                    <div>
                        <label for="lastName">Last Name</label>
                        <InputText id="lastName" @bind-Value="child.LastName" class="input-class" placeholder ="Enter Last Name"/>
                        <ValidationMessage For="() => child.LastName" />
                    </div>
                    <div>
                        <label for="childId">Child ID</label>
                        <InputNumber id="childId" @bind-Value="child.ChildId" class="input-class" />
                        <ValidationMessage For="() => child.ChildId" />
                    </div>
                    <div>
                        <PrimaryButton type="submit">Verify</PrimaryButton>
                    </div>
                </div>
            </EditForm>
        </div>
        
    </div>
    }

    <!-- Only show the next step if validation is successful -->
    @if (isAccountSetup)
    {
        <div class="mt-3 shadow overflow-hidden sm:rounded-md">
            <div class="px-4 bg-white dark:bg-black sm:p-6">
            <EditForm id="initialRegisterForm" Model="@child" OnValidSubmit="SaveChanges" FormName="SetupAccount">
                <Heading3>Set up Account</Heading3>
                <DataAnnotationsValidator />
                <ValidationSummary class="mb-3 text-danger text-center font-semibold" />
                <div class="flex flex-col gap-y-4">
                    <div>
                        <label for="userName">Username</label>
                        <InputText id="firstName" @bind-Value="child.UserName" class="input-class" placeholder ="Enter User Name" />
                        <ValidationMessage For="() => child.UserName" />
                    </div>
                    <div>
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="child.PasswordHash" class="input-class"placeholder ="Enter Password"/>
                        <ValidationMessage For="() => child.PasswordHash" />
                    </div>
                    <div>
    <label for="securityQuestion">Security Question</label>
    <InputSelect id="securityQuestion" @bind-Value="child.SecurityQuestion" class="input-class">
        <option value="">Select a security question</option>
        <option value="What was the name of your first pet?">What was the name of your first pet?</option>
        <option value="What is your mother's maiden name?">What is your mother's maiden name?</option>
        <option value="What was your first car?">What was your first car?</option>
        <option value="What is your favorite book?">What is your favorite book?</option>
        <option value="In what city were you born?">In what city were you born?</option>
    </InputSelect>
    <ValidationMessage For="() => child.SecurityQuestion" />
</div>

                    <div>
                        <label for="securityAnswer">Security Answer</label>
                        <InputText id="securityAnswer" @bind-Value="child.SecurityAnswer" class="input-class" placeholder ="Enter Answer"/>
                        <ValidationMessage For="() => child.SecurityAnswer" />
                    </div>
                    <div>
                        <PrimaryButton type="submit">Submit</PrimaryButton>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    }
    
</div>

@code {
    private Child child = new Child();

    private bool isAccountSetup = false;
    private List<IdentityError>? identityErrors;

    private string? Message => identityErrors is null ? null : string.Join(", ", identityErrors.Select(e => e.Description));

    protected override Task OnInitializedAsync()
    {
        child = new Child(); // Reset child object to default state
        return base.OnInitializedAsync();
    }

    private void ClearErrors()
    {
        identityErrors = null;
    }


    public async Task ValidateUser()
    {
        ClearErrors();//Clear previous error
        Console.WriteLine($"Input FirstName: {child.FirstName ?? "null"}");
        Console.WriteLine($"Input LastName: {child.LastName ?? "null"}");
        Console.WriteLine($"Input ChildId: {child.ChildId}");

        // Ensure ChildId is valid (not zero)
        if (child.ChildId <= 0)
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError
                {
                    Description = "Please enter a valid Child ID. [ESPANOL]Por Favor, introduzca un Child ID valido."
                }
            };
            return;
        }

        // Check if the child exists by FirstName, LastName, and ChildId
        var existingChild = await ChildService.GetChildByNameAsync(child.FirstName, child.LastName, child.ChildId);

        // If no child is found, or the ChildId does not match, return an error message
        if (existingChild == null)
        {
            identityErrors = new List<IdentityError>
        {
            new IdentityError
            {
                Description = "We cannot find you according to the information entered. Please try again or contact someone from your local office for more help. [ESPANOL]No podemos encontrarlo según la información ingresada. Inténtelo de nuevo o comuníquese con alguien de su oficina local para obtener más ayuda."
            }
        };
            return;
        }

        // If the ChildId does not match, return a different error
        if (existingChild.ChildId != child.ChildId)
        {
            identityErrors = new List<IdentityError>
        {
            new IdentityError
            {
                Description = "The provided Child ID does not match our records. [ESPANOL]La identificación infantil proporcionada no coincide con nuestros registros."
            }
        };
            return;
        }

        // If validation is successful, show the account setup section
        isAccountSetup = true;

    }

    public async Task SaveChanges()
{
    ClearErrors(); // Clear previous errors
    Console.WriteLine($"Input Username: {child.UserName ?? "null"}");
    Console.WriteLine($"Input Password: {child.PasswordHash ?? "null"}");
    Console.WriteLine($"Input SecurityQuestion: {child.SecurityQuestion ?? "null"}");
    Console.WriteLine($"Input SecurityAnswer: {child.SecurityAnswer ?? "null"}");

    // Validate Username
    if (string.IsNullOrWhiteSpace(child.UserName))
    {
        AddError("Username is required.[ESPANOL]El nombre de usuario es requerido.");
    }
    else if (child.UserName.Length > 28)
    {
        AddError("Username cannot be more than 28 characters. [ESPANOL]El nombre usuario no puede tener más de 28 caracteres.");
    }
    else if (!Regex.IsMatch(child.UserName, @"^[a-zA-Z0-9]*$"))
    {
        AddError("Username cannot have special characters. [ESPANOL]El nombre usuario no puede tener caracteres especiales.");
    }

    // Validate Password
    if (string.IsNullOrWhiteSpace(child.PasswordHash) || child.PasswordHash.Length < 8 || !Regex.IsMatch(child.PasswordHash, @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[^\s]{8,}$"))
    {
        AddError("The password must have at least one uppercase letter, one lowercase letter, one number, one special character and no spaces. [ESPANOL]Las contraseñas deben tener al menos una letra maýuscula, una letra minúscula, un dígito, un carácter especial y ningún espacio.");
    }
    


    // Validate Security Question
    if (string.IsNullOrWhiteSpace(child.SecurityQuestion))
    {
        AddError("Security question is required. [ESPANOL]Pregunta de seguridad es requerida.");
    }

    // Validate Security Answer
    if (string.IsNullOrWhiteSpace(child.SecurityAnswer))
    {
        AddError("Security answer is required. [ESPANOL]Respuesta a la pregunta de seguridad es requerida.");
    }

    // If there are any errors, return early
    if (identityErrors != null && identityErrors.Any())
    {
        return;
    }

    // If validation passes, show the account setup section
    await ChildService.UpdateChildAsync(child);
    NavigationManager.NavigateTo("/"); // Redirect after saving
}

private void AddError(string errorMessage)
{
    if (identityErrors == null)
    {
        identityErrors = new List<IdentityError>();
    }
    identityErrors.Add(new IdentityError { Description = errorMessage });
}

private void NavigateBack()
    {
        NavigationManager.NavigateTo("/RegisterRoute"); // Replace with the previous page URL
    }




}

<style>
    .error-summary {
        color: red;
        font-weight: bold;
        text-align: center;
    }

    .validation-messages {
        color: red;
        font-size: 14px;
        margin-top: 10px;
    }

    .validation-messages .validation-message {
        margin-top: 5px;
    }
</style>




